// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatuses {
  NEW
  CANCELED
  UNASSIGNED
  ASSIGNED
  DONE
}

model User {
  id       Int     @id @default(autoincrement())
  username String?

  messagerUsers MessagerUser[]

  @@map(name: "users")
}

model Messager {
  id   Int    @id @default(autoincrement())
  code String @unique
  name String

  messagerUsers    MessagerUser[]
  messagerChannels MessagerChannel[]
  messagerLabels   MessagerLabel[]
  messagerChats    MessagerChat[]
  messagerFlows    MessagerFlow[]

  @@map(name: "messagers")
}

model MessagerUser {
  id Int @id @default(autoincrement())

  messagerId Int      @map("messager_id")
  messager   Messager @relation(fields: [messagerId], references: [id], onDelete: SetNull)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: SetNull)

  uid String @db.VarChar(256)

  channels MessagerUserChannel[]
  chats    MessagerChat[]

  @@unique([uid, messagerId])
  @@map(name: "messager_users")
}

model MessagerFlow {
  id Int @id @default(autoincrement())

  messagerId Int      @map("messager_id")
  messager   Messager @relation(fields: [messagerId], references: [id], onDelete: SetNull)

  userUid String @db.VarChar(256)
  chatUid String @db.VarChar(256)

  active Boolean @default(false)
  data   String

  @@unique([userUid, chatUid])
  @@map("messager_flows")
}

model MessagerChat {
  id Int @id @default(autoincrement())

  uid String @db.VarChar(256)

  messagerId Int      @map("messager_id")
  messager   Messager @relation(fields: [messagerId], references: [id], onDelete: SetNull)

  messagerUserId Int          @map("messager_user_id")
  messagerUser   MessagerUser @relation(fields: [messagerUserId], references: [id], onDelete: SetNull)

  orderMessages OrderMessage[]

  @@unique([uid, messagerId])
  @@map(name: "messager_chats")
}

model MessagerChannel {
  id Int @id @default(autoincrement())

  messagerId Int      @map("messager_id")
  messager   Messager @relation(fields: [messagerId], references: [id], onDelete: SetNull)

  name String?
  uid  String  @db.VarChar(256)

  messager_users MessagerUserChannel[]
  labels         MessagerChannelLabel[]
  orderMessages  OrderMessage[]

  @@unique([uid, messagerId])
  @@map(name: "messager_channels")
}

model MessagerUserChannel {
  messagerUserId Int          @map("messager_user_id")
  messagerUser   MessagerUser @relation(fields: [messagerUserId], references: [id], onDelete: SetNull)

  messagerChannelId Int             @map("messager_channel_id")
  messagerChannel   MessagerChannel @relation(fields: [messagerChannelId], references: [id], onDelete: SetNull)

  @@id([messagerUserId, messagerChannelId])
  @@map(name: "messager_users_channels")
}

model MessagerLabel {
  id Int @id @default(autoincrement())

  messagerId Int      @map("messager_id")
  messager   Messager @relation(fields: [messagerId], references: [id], onDelete: SetNull)

  name String?
  code String  @unique @db.VarChar(64)

  channels MessagerChannelLabel[]

  @@map(name: "messager_labels")
}

model MessagerChannelLabel {
  messagerlabelCode String        @map("messager_label_code")
  messagerLabel     MessagerLabel @relation(fields: [messagerlabelCode], references: [code], onDelete: SetNull)

  messagerChannelId Int             @map("messager_channel_id")
  messagerChannel   MessagerChannel @relation(fields: [messagerChannelId], references: [id], onDelete: SetNull)

  @@id([messagerlabelCode, messagerChannelId])
  @@map(name: "messager_channels_labels")
}

model Order {
  id              Int           @id @default(autoincrement())
  clientPhone     String        @map("client_phone") @db.VarChar(64)
  clientName      String?       @map("client_name")
  date            DateTime?
  additionalPhone String?       @map("additional_phone") @db.VarChar(64)
  fullAddress     String?       @map("full_address")
  defect          String?       @db.VarChar(128)
  brand           String?       @db.VarChar(128)
  model           String?       @db.VarChar(128)
  deviceTypeId    Int?          @map("device_type_id")
  deviceType      DeviceType?   @relation(fields: [deviceTypeId], references: [id], onDelete: SetNull)
  status          OrderStatuses @default(NEW)
  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt       DateTime      @default(now()) @map("updated_at") @db.Timestamptz(3)

  messages OrderMessage[]
  calls    Call[]

  @@map(name: "orders")
}

model OrderMessage {
  id         Int    @id @default(autoincrement())
  messageUid String @map("message_uid")
  chatUid    String @map("chat_uid")

  orderId Int
  order   Order @relation(fields: [orderId], references: [id], onDelete: SetNull)

  messagerChannelId Int?             @map("messager_channel_id")
  messagerChannel   MessagerChannel? @relation(fields: [messagerChannelId], references: [id], onDelete: SetNull)

  messagerChatId Int?          @map("messager_chat_id")
  messagerChat   MessagerChat? @relation(fields: [messagerChatId], references: [id], onDelete: SetNull)

  @@unique([orderId, chatUid, messageUid])
  @@map(name: "order_messages")
}

model Call {
  id          Int      @id @default(autoincrement())
  callId      String   @unique @map("call_id") @db.VarChar(128)
  clientPhone String   @map("client_phone") @db.VarChar(128)
  date        DateTime
  type        String   @db.VarChar(128)
  status      String   @db.VarChar(128)
  duration    Int      @default(0)
  recordLink  String?  @map("record_link")

  orderId Int?
  order   Order? @relation(fields: [orderId], references: [id], onDelete: SetNull)

  @@map(name: "calls")
}

model DeviceType {
  id     Int     @id @default(autoincrement())
  title  String  @db.VarChar(128)
  orders Order[]

  @@map(name: "device_types")
}
